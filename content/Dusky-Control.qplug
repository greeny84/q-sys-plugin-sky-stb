-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique

PluginInfo = {
	Name = "SkySTB~DuskyControl (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.0.0-master",
	Id = "qsysc-skystb.duskycontrol.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Plugin for control of a Dusky Control for Sky TV",
	ShowDebug = true
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

local MaxBoxes = 8
-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Host",
			Type = "string",
			Value = "127.0.0.1"
		},
		{
			Name = "IP Port",
			Type = "integer",
			Value = 6001,
			Min = 1024,
			Max = 65535
		},
		{
			Name = "Box Count",
			Type = "integer",
			Min = 1,
			Max = MaxBoxes,
			Value = 1
		}
	}
	for i = 1, MaxBoxes do
		table.insert(
			props,
			{
				Name = "Box " .. i .. " Type",
				Type = "enum",
				Choices = {"Sky", "Sky+", "Sky+HD"},
				Value = "Sky+"
			}
		)
	end
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	for i = 1, MaxBoxes do
		props["Box " .. i .. " Type"].IsHidden = props["Box Count"].Value < i
	end
	return props
end

-- RemoteButtons holds the info about all of the possible Sky Remote buttons
local RemoteButtons = {
	{Name = "Digit 0", Command = "0"},
	{Name = "Digit 1", Command = "1"},
	{Name = "Digit 2", Command = "2"},
	{Name = "Digit 3", Command = "3"},
	{Name = "Digit 4", Command = "4"},
	{Name = "Digit 5", Command = "5"},
	{Name = "Digit 6", Command = "6"},
	{Name = "Digit 7", Command = "7"},
	{Name = "Digit 8", Command = "8"},
	{Name = "Digit 9", Command = "9"},
	{Name = "Power", Command = "fp"},
	{Name = "Channel Up", Command = "f+"},
	{Name = "Channel Down", Command = "f-"},
	{Name = "Pause", Command = "fa"},
	{Name = "Fast Forward", Command = "ff"},
	{Name = "Text", Command = "ft"},
	{Name = "Rewind", Command = "fw"},
	{Name = "Play", Command = "fl"},
	{Name = "Stop", Command = "fs"},
	{Name = "Record", Command = "fr"},
	{Name = "Cursor Up", Command = "cu"},
	{Name = "Cursor Down", Command = "cd"},
	{Name = "Cursor Left", Command = "cl"},
	{Name = "Cursor Right", Command = "cr"},
	{Name = "Select", Command = "cs"},
	{Name = "Red", Command = "CR"},
	{Name = "Green", Command = "CG"},
	{Name = "Yellow", Command = "CY"},
	{Name = "Blue", Command = "CB"},
	{Name = "Box Office", Command = "bo"},
	{Name = "Services", Command = "sr"},
	{Name = "Sky", Command = "sk"},
	{Name = "Help", Command = "hl"},
	{Name = "Backup", Command = "bk"},
	{Name = "TV", Command = "tv"},
	{Name = "Info", Command = "if"},
	{Name = "TV Guide", Command = "tg"},
	{Name = "Interactive", Command = "in"}
}

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Both",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "FirmwareVersion",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		},
		-- Set Channel Direct
		{
			Name = "ChannelSelect",
			ControlType = "Text",
			Count = props["Box Count"].Value,
			UserPin = true,
			PinStyle = "Input"
		}
	}
	-- Remote Control Buttons
	for b = 1, #RemoteButtons do
		table.insert(
			ctls,
			{
				Name = "RemoteButton" .. RemoteButtons[b].Name,
				ControlType = "Button",
				ButtonType = "Momentary",
				Count = props["Box Count"].Value,
				UserPin = true,
				PinStyle = "Input"
			}
		)
	end
	return ctls
end

function GetPages(props) -- This function allows you to populate pages in your plugin.
	pages = {}
	for i = 1, props["Box Count"].Value do
		table.insert(pages, {name = "Remote " .. i})
	end

	return pages
end

function GetControlLayout(props)
	local ActiveRemote = props["page_index"].Value
	local layout = {}
	local graphics = {}
	-- Helper string to get around system not indexing single value as [1]
	local ctl_str = tostring(props["Box Count"].Value == 1 and "" or " " .. ActiveRemote)

	local x, y = 0, 0
	-- Status Info Section
	layout["Online"] = {
		PrettyName = "Online",
		Style = "Indicator",
		Color = {0, 255, 0},
		OffColor = {200, 0, 0},
		UnlinkOffColor = true,
		Position = {x + 3, y + 25},
		Size = {x + 25, y + 25}
	}
	layout["ConnectionState"] = {
		PrettyName = "Connection State",
		Style = "Text",
		HTextAlign = "Left",
		Padding = 5,
		StrokeWidth = 0,
		Position = {x + 35, y + 25},
		Size = {200, 25}
	}
	layout["FirmwareVersion"] = {
		PrettyName = "Firmware",
		Style = "Text",
		HTextAlign = "Left",
		StrokeWidth = 0,
		Position = {x + 235, y + 25},
		Size = {100, 25}
	}
	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Status",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {415, 60} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)

	-- Controls section
	y = y + 70

	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Controls",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {415, 400} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Set Channel:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 20},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Remote Buttons:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 65},
			Size = {75, 25}
		}
	)
	-- Channel Select
	layout["ChannelSelect" .. ctl_str] = {
		PrettyName = "Box" .. ctl_str .. "~Channel Select",
		Style = "TextBox",
		Position = {x + 80, y + 20},
		Size = {60, 25}
	}

	i, j = 0, 1
	for b = 1, #RemoteButtons do
		-- Remote Control Buttons
		layout["RemoteButton" .. RemoteButtons[b].Name .. ctl_str] = {
			PrettyName = "Box" .. ctl_str .. "~Remote " .. RemoteButtons[b].Name,
			Legend = RemoteButtons[b].Name,
			Style = "Button",
			ButtonStyle = "Momentary",
			Position = {x + 80 + (50 * i), y + 40 + (25 * j)},
			Size = {50, 25}
		}
		i = i + 1
		if i == 5 then
			i = 0
			j = j + 1
		end
	end

	return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end

if Controls then
	-- This is the area where you would put your 'Runtime' code, or the 'control' aspect of your plugin.
	-- Once you are confident in your script, simply copy and paste that script here, and then you can fully test the plugin completely
	-- Don't forget to comment out your code pin and hide the debug before distributing!

	-- Build TCP Client
	conn = TcpSocket.New()
	conn.ReadTimeout = 0
	conn.WriteTimeout = 0
	conn.ReconnectTimeout = 5

	-- Create and setup Polling
	timerPoll = Timer.New()

	timerPoll.EventHandler = function(timer)
		fnPoll()
	end

	function fnInitPoll()
		timerPoll:Stop()
		timerPoll:Start(20)
	end

	function fnPoll()
		-- Poll the Info
		fnSend("p")
	end

	-- Data Sending Helper Function
	function fnSend(cmd)
		if conn.IsConnected then
			-- Send to device
			--print("-->Dusky::" .. cmd)
			conn:Write(cmd)
			-- Reset Polling
			fnInitPoll()
		end
	end
	function setConnState(msg)
		Controls["ConnectionState"].String =
			"[" .. Properties["IP Host"].Value .. ":" .. Properties["IP Port"].Value .. "] " .. msg
	end
	-- Setup Utility Callbacks as required
	conn.Connected = function(conn)
		setConnState("Connected")
		fnPoll()
	end
	conn.Reconnect = function(conn)
		setConnState("Reconnect")
	end
	conn.Closed = function(conn)
		setConnState("Closed")
		Controls.Online.Boolean = false
	end
	conn.Error = function(conn, err)
		setConnState("Error")
	end
	conn.Timeout = function(conn, err)
		setConnState("Timeout")
	end
	-- Helper Function - Open TCP Connection
	function fnConnect()
		-- Open Connection
		conn:Connect(Properties["IP Host"].Value, Properties["IP Port"].Value)
		-- Set IP Host value
		setConnState("Connecting")
	end

	-- Create and setup the Communications Timeout
	timerComms = Timer.New()
	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
		print("Connection Timed Out")
		conn:Disconnect()
		fnConnect()
	end

	conn.Data = function(conn)
		x = conn:Read(conn.BufferLength)
		if x:sub(1, 2) == "OK" then
			timerComms:Stop()
			Controls.Online.Boolean = true
			timerComms:Start(45)
		end
		-- Data Processing here
	end

	function getBoxTypeID(b)
		if Properties["Box " .. b .. " Type"].Value == "Sky" then
			return "s"
		end
		if Properties["Box " .. b .. " Type"].Value == "Sky+" then
			return "+"
		end
		if Properties["Box " .. b .. " Type"].Value == "Sky+HD" then
			return "h"
		end
	end

	for k, v in pairs(Controls) do
		-- Multi Controls
		for s = 1, Properties["Box Count"].Value do
			if k:sub(1, 12) == "RemoteButton" then
				for b = 1, #RemoteButtons do
					if k == "RemoteButton" .. RemoteButtons[b].Name then
						if Properties["Box Count"].Value > 1 then
							v[s].EventHandler = function(changedControl)
								if changedControl.Boolean == true then
									sendRemoteButton(s, RemoteButtons[b].Command)
								end
							end
						else
							v.EventHandler = function(changedControl)
								if changedControl.Boolean == true then
									sendRemoteButton(s, RemoteButtons[b].Command)
								end
							end
						end
					end
				end
			elseif k == "ChannelSelect" then
				if Properties["Box Count"].Value > 1 then
					v[s].EventHandler = function(changedControl)
						sendChannel(s, changedControl.String)
					end
				else
					v.EventHandler = function(changedControl)
						sendChannel(s, changedControl.String)
					end
				end
			end
		end
	end

	function sendRemoteButton(box, btn)
		msg = "A" .. getBoxTypeID(box) .. string.format("%02i", box) .. btn .. "x"
		fnSend(msg)
	end

	function sendChannel(box, chn)
		msg = "A" .. getBoxTypeID(box) .. string.format("%02i", box) .. "sk" .. chn .. "x"
		fnSend(msg)
	end

	-- Startup
	fnConnect()
end
