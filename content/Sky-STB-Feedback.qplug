-- The PluginInfo header contains some important information that Q-Sys Designer will parse when compiled.
-- Id is a unique ID given to every plugin. While we typically use randomly generated UUID's, you can use anything here so long as it is unique

PluginInfo = {
	Name = "SkySTB~Feedback (0.0.0.0-master)", -- The tilde here indicates folder structure in the Shematic Elements pane
	Version = "0.0.0.0-master",
	Id = "qsysc.skystb.feedback.0.0.0.0-master", -- show this is just a unique id. Show some commented out 'fun' unique ids
	Description = "Plugin for display RS232 feedback from Sky TV",
	ShowDebug = true
}

-- Once you've drawn your plugin in Designer, you can determine what colors you use a lot. Save yourself some time by putting them in a table, and then simply calling them later.
local Colors = {
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

-- We can let users determine some of the plugin properties by exposing them here
-- While this function can be very useful, it is completely optional and not always needed.
-- If no Properties are set here, only the position and fill properties of your plugin will show in the Properties pane
function GetProperties()
	props = {
		{
			Name = "IP Host",
			Type = "string",
			Value = "127.0.0.1"
		},
		{
			Name = "IP Port",
			Type = "integer",
			Value = 6002,
			Min = 1024,
			Max = 65535
		}
	}
	return props
end

-- The below function is optional (like GetProperties() is), but it can allow further customization of what users can and can't do with your plugin.
-- In this example, when Model 1 is selected in the properties pane, the ability to modify some of the properties will be hidden, only allowing customization with Model 2
-- Another application of this is if you have different input/output types for different models, and want those properties to be dynamic in the Properties pane
function RectifyProperties(props)
	return props
end

-- The below function is where you will populate the controls for your plugin.
-- If you've written some of the Runtime code already, simply use the control names you populated in Text Controller/Control Script, and use their Properties to inform the values here
-- ControlType can be Button, Knob, Indicator or Text
-- ButtonType ( ControlType == Button ) can be Momentary, Toggle or Trigger
-- IndicatorType ( ControlType == Indicator ) can be Led, Meter, Text or Status
-- ControlUnit ( ControlType == Knob ) can be Hz, Float, Integer, Pan, Percent, Position or Seconds
function GetControls(props)
	ctls = {
		-- System Pins
		{
			Name = "Online",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ConnectionState",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Both",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "Power",
			ControlType = "Indicator",
			IndicatorType = "Led",
			PinStyle = "Output",
			Count = 1,
			UserPin = true
		},
		{
			Name = "ChannelNumber",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "ChannelName",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "ProgramStartTime",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "ProgramName",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		},
		{
			Name = "ProgramDescription",
			ControlType = "Indicator",
			IndicatorType = "Text"
			--PinStyle = "Output",
			--Count = 1,
			--UserPin = true
		}
	}
	return ctls
end

-- Variable holding Page Names for ease
local pagenames = {"System"}

function GetPages(props) -- This function allows you to populate pages in your plugin.
	pages = {}
	table.insert(pages, {name = pagenames[1]})
	return pages
end

function GetControlLayout(props)
	local layout = {}
	local graphics = {}

	local x, y = 0, 0
	-- Status Info Section
	layout["Online"] = {
		PrettyName = "Online",
		Style = "Indicator",
		Color = {0, 255, 0},
		OffColor = {200, 0, 0},
		UnlinkOffColor = true,
		Position = {x + 3, y + 25},
		Size = {x + 25, y + 25}
	}
	layout["ConnectionState"] = {
		PrettyName = "Connection State",
		Style = "Text",
		HTextAlign = "Left",
		Padding = 5,
		StrokeWidth = 0,
		Position = {x + 35, y + 25},
		Size = {200, 25}
	}
	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "Status",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {415, 60} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)

	-- Feedback section
	y = y + 70
	-- SkyBox Status
	layout["Power"] = {
		PrettyName = "Power",
		Style = "Indicator",
		Color = {0, 255, 0},
		OffColor = {0, 50, 0},
		UnlinkOffColor = true,
		Position = {x + 80, y + 20},
		Size = {25, 25}
	}
	layout["ChannelName"] = {
		PrettyName = "Channel Name",
		Style = "Text",
		StrokeWidth = 0,
		Padding = 5,
		Position = {x + 80, y + 50},
		Size = {250, 25}
	}
	layout["ChannelNumber"] = {
		PrettyName = "Channel Number",
		Style = "Text",
		StrokeWidth = 0,
		Padding = 5,
		Position = {x + 80, y + 80},
		Size = {50, 25}
	}
	layout["ProgramName"] = {
		PrettyName = "Program Name",
		Style = "Text",
		StrokeWidth = 0,
		Padding = 5,
		Position = {x + 80, y + 110},
		Size = {250, 25}
	}
	layout["ProgramStartTime"] = {
		PrettyName = "Program Start Time",
		Style = "Text",
		StrokeWidth = 0,
		Padding = 5,
		Position = {x + 80, y + 140},
		Size = {50, 25}
	}
	layout["ProgramDescription"] = {
		PrettyName = "Program Description",
		Style = "Text",
		StrokeWidth = 0,
		Padding = 5,
		WordWrap = true,
		Position = {x + 80, y + 170},
		Size = {250, 100}
	}
	table.insert(
		graphics,
		{
			Type = "GroupBox", -- This is the overall groupbox that will give the plugin a more 'contained' look
			Text = "State",
			HTextAlign = "Left",
			Fill = Colors.White,
			CornerRadius = 8,
			StrokeColor = Colors.Black,
			StrokeWidth = 1,
			Position = {x, y},
			Size = {415, 300} -- The width of the main GroupBox is dependent on how many channels the user specified. More channels means a wider group box
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Power:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 20},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Chan Name:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 50},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Chan No:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 80},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Prog Name:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 110},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Prog StartTime:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 140},
			Size = {75, 25}
		}
	)
	table.insert(
		graphics,
		{
			Type = "Text",
			Text = "Prog Desc:",
			Font = "Roboto",
			FontSize = 12,
			FontStyle = "Bold",
			HTextAlign = "Right",
			Color = Colors.Black,
			Position = {x + 00, y + 170},
			Size = {75, 25}
		}
	)

	return layout, graphics
end

-- Components provide a way to save or retain certain settings without necessarily displaying it in another control such as a combobox.
-- For example, the when someone hits the "Save" button on this plugin, it saves the RGB values in the "rgb_storage" component below.
-- This allows us to do things 'under the hood' which gives the plugin a much sleeker feel.
function GetComponents(props)
	return {}
end

if Controls then
	-- This is the area where you would put your 'Runtime' code, or the 'control' aspect of your plugin.
	-- Once you are confident in your script, simply copy and paste that script here, and then you can fully test the plugin completely
	-- Don't forget to comment out your code pin and hide the debug before distributing!

	-- Local Buffer
	local Rx = ""

	-- Sample Data
	local Test01 = "\x0A015CE000101--a4"
	local Test02 = "\x0A232SSCN010270SS"
	Test02 = Test02 .. "CA009FXSSDT026 2"
	Test02 = Test02 .. ".06pm Sat 12 Nov"
	Test02 = Test02 .. " SST00132.00pmSS"
	Test02 = Test02 .. "N0012\x86JAG\x87SSE015"
	Test02 = Test02 .. "7Admiral Chegwid"
	Test02 = Test02 .. "den and Clayton "
	Test02 = Test02 .. "Webb make an unl"
	Test02 = Test02 .. "ikely team when "
	Test02 = Test02 .. "they join forces"
	Test02 = Test02 .. " to save a CIA a"
	Test02 = Test02 .. "gent from Italia"
	Test02 = Test02 .. "n terrorists. St"
	Test02 = Test02 .. "arring: Catherin"
	Test02 = Test02 .. "e Bell.b3"

	local Test03 = "N0012.JAG.SSE015"

	function verifyPacket(data)
		local chk = 0
		for x = 1, #data - 2 do
			chk = chk + string.byte(data:sub(x, x))
		end
		if string.format("%x", chk):sub(-2) == data:sub(-2) then
			return true
		end
		return false
	end

	function processPacket(data)
		local stx = 5
		while stx < #data - 2 do
			-- Get Packet Parts
			local Type = data:sub(stx, stx + 3)
			local Len = tonumber(data:sub(stx + 4, stx + 6))
			local PayLoad = data:sub(stx + 7, stx + Len - 1)

			-- Clean up Payload for non-printable chars
			PayLoad = string.gsub(PayLoad, "\x09", "")
			PayLoad = string.gsub(PayLoad, "\x86", "")
			PayLoad = string.gsub(PayLoad, "\x87", "")

			-- Process Type
			if Type == "CEER" then
				Controls.ChannelNumber.String = "Err!"
			elseif Type == "CE00" or Type == "SSCN" then
				Controls.ChannelNumber.String = PayLoad
				Controls.Power.Boolean = true
			elseif Type == "SSCA" then
				Controls.ChannelName.String = PayLoad
			elseif Type == "SST0" then
				Controls.ProgramStartTime.String = PayLoad
			elseif Type == "SSN0" then
				Controls.ProgramName.String = PayLoad
			elseif Type == "SSE0" then
				Controls.ProgramDescription.String = PayLoad
			elseif Type == "SYST" then
				Controls.Power.Boolean = PayLoad == "1"
				-- Clear out data if in standby
				if Controls.Power.Boolean == false then
					Controls.ChannelNumber.String = ""
					Controls.ChannelName.String = ""
					Controls.ProgramStartTime.String = ""
					Controls.ProgramName.String = ""
					Controls.ProgramDescription.String = ""
				end
			end

			-- Set new stx
			stx = stx + Len
		end
	end

	-- Build TCP Client
	conn = TcpSocket.New()
	conn.ReadTimeout = 0
	conn.WriteTimeout = 0
	conn.ReconnectTimeout = 5

	-- Create and setup the retry timer
	timerRetry = Timer.New()
	timerRetry.EventHandler = function(timer)
		timer:Stop()
		setCommsState("Retrying")
		fnConnect()
	end

	-- Create and setup the Communications Timeout Timer
	timerComms = Timer.New()
	timerComms.EventHandler = function(timer)
		timer:Stop()
		Controls.Online.Boolean = false
		Rx = ""
		conn:Disconnect()
		timerRetry:Start(5)
		setCommsState("Waiting")
	end

	function setConnState(msg)
		Controls["ConnectionState"].String =
			"[" .. Properties["IP Host"].Value .. ":" .. Properties["IP Port"].Value .. "] " .. msg
	end

	-- Setup Utility Callbacks as required
	conn.Connected = function(conn)
		setConnState("Connected")
		timerComms:Start(300)
	end
	conn.Reconnect = function(conn)
		setConnState("Reconnect")
	end
	conn.Closed = function(conn)
		setConnState("Closed")
		Controls.Online.Boolean = false
	end
	conn.Error = function(conn, err)
		setConnState("Error")
	end
	conn.Timeout = function(conn, err)
		setConnState("Timeout")
	end
	-- Helper Function - Open TCP Connection
	function fnConnect()
		-- Open Connection
		conn:Connect(Properties["IP Host"].Value, Properties["IP Port"].Value)
		-- Set IP Host value
		setConnState("Connecting")
	end

	function processRx()
		-- While a start byte is present in the buffer
		while Rx:find("\x0A") do
			-- Bring to start of buffer if not there (clearing garbage on way)
			x, y = Rx:find("\x0A")
			Rx = Rx:sub(x)
			-- Check we have enough in buffer to give us a length
			if #Rx <= 8 then
				return
			end
			-- Check a full packet is in the buffer
			local Len = tonumber(Rx:sub(2, 4))
			if #Rx < 1 + Len then
				return
			end
			-- Verify integrity of packet
			if verifyPacket(Rx:sub(1, Len + 1)) == false then
				Rx = ""
				return
			end
			-- Process it
			processPacket(Rx:sub(1, Len + 1))
			-- Remove it from buffer
			Rx = Rx:sub(Len + 1)
			-- Reset Online Timer
			timerComms:Stop()
			if Controls.Online then -- Check for when developing in a Control Script block
				Controls.Online.Boolean = true
			end
			timerComms:Start(300)
		end
	end

	conn.Data = function(conn)
		-- Add incoming data to my buffer
		Rx = Rx .. conn:Read(conn.BufferLength)
		-- Process what we have
		processRx()
	end

	-- Startup
	fnConnect()
end
